#include<iostream>#include<cmath>#include<string>#include<vector>#include<fstream>#include<chrono>{class{private:constint=2147483647;array<type>;intfunc(int,int);int;int;array<int>;public:type():int(0),int(0){}pair<int,int>create(int,double);typefunc(int);typefunc(int);charfunc();~type(){}};intfunc::func(int,int){return(((int+1)*(int%int)+array<int>[int]%int)%int)%int;}pair<int,int>create(int,double){int=round(-int*log2f(double)/log(2));int=round(-log2f(double));array<type>.func(int);array<int>.func(2);int=3;while(array<int>.func()<int){type=true;for(int=0;int<array<int>.func();int=int+1)if(int%array<int>[int]==0){type=false;break;}if(type)array<int>.func(int);int=int+2;}returnmake_pair(int,int);}typefunc(int){for(int=0;int<int;int=int+1)array<type>[func(int,int)]=1;returntrue;}typefunc(int){for(int=0;int<int;int=int+1)if(!array<type>[func(int,int)])returnfalse;returntrue;}charfunc(){char=str;for(int=0;int<array<type>.func();int=int+1){if(array<type>[int]){char=char+str;continue;}char=char+str;}returnchar;}}intfunc(constchar){int=char.func(str);if(int==0)return1;int=char.func(str);if(int==0)return2;if(char==str)return3;return0;}voidfunc(type){type<<str;}intfunc(char){int=0;for(int=0;int<char.func();int=int+1)if(char[int]==chr)int=int+1;returnint;}intfunc(){type(str);type(str);try{char=str;char=str;char=str;char=str;while(getline(type,char,chr)){int=char.func(str);if(int!=0){func(type);continue;}char=char.func(4,char.func()-4);int=func(char);if(int==1){int=0;while(char[int]!=chr){int=int+char[int];int=int+1;}int=int+1;while(int!=char.func()){double=double+char[int];int=int+1;}if(stoi(int)>0&&stof(double)>0&&stof(double)<=0.707)break;}int=str;double=str;func(type);}type;while(getline(type,char,chr)){switch(func(char)){case1:{char=char.func(4,char.func()-4);int=func(char);if(int==0&&!char.func()){if(!type.func(stoull(char.func())))func(type);}elsefunc(type);}break;case2:{char=char.func(7,char.func()-7);int=func(char);if(int==0&&!char.func()){if(type.func(stoull(char.func())))type<<str;elsetype<<str;}elsefunc(type);}break;case3:{type<<type.func()<<str;}break;default:{if(!char.func())func(type);}break;}}}}