#include <iostream>
#include <string>
#include <fstream>
class Queue {
    int size;
    std::string *queue1;
    int in;
    int out;
    int not_free;
public:
    Queue(int  start_size) {
        size = start_size;
        queue1 = new std::string[size];
        in = -1;
        out = -1;
	not_free = 0;
    }

	void  st_push(std::string x, std::ofstream& write) {
		std::string a;
		int i = 0;
		while (i <= x.length() - 1) {
			if (x[i] == ' ') {
				write << "error" << std::endl;
				return;
			}
			a = a + x[i];
			i++;
		}
		if ( not_free == size) {
			write << "overflow" << std::endl;
			return;
		}
		if (in+1 == size) in = -1;
		in++;
		not_free++;
		queue1[in] = a;
	}


    void st_pop(std::ofstream& write) {
	if (not_free == 0) {  
		write << "underflow" << std::endl;
		return;
		}
	if (out+1 == size) out = -1;
	out = out + 1;
	not_free--;
	write << queue1[out] << std::endl;
    }

    void st_print(std::ofstream& write) {
	if ( not_free == 0 ) { write << "empty" << std::endl; return; }
	if (in <= out) {
	for ( unsigned i = out+1; i < size; i++) 
		write << queue1[i] << ' ';
	for ( unsigned j = 0; j < in; j++)
		write << queue1[j] << ' ';
	write << queue1[in] << std::endl;	
	} else {
	for ( unsigned i = out + 1; i < in; i++)
		write << queue1[i] << ' ';
	write << queue1[in] << std::endl;
		}
    }

	~Queue() {
		delete[]queue1;
	}


};


int main(int argc, char* argv[]) {
	std::ifstream read(argv[1]);
        std::ofstream write(argv[2]);
        std::string size;
	size_t pos = size.find("set_size");
	int size_int = 0;
		while (getline(read, size, '\n')) {
			if (size.length() == 0) continue;
			size_t pos = size.find("set_size");
			if (pos == std::string::npos) {
				write << "error" << std::endl;
				continue;
			}
			if (size.length() - 1 < pos + 9) {
				write << "error" << std::endl;
				break;
			}
			int i = pos + 9;
			int b = 0;
			while ((size[i] == '1') || (size[i] == '2') || (size[i] == '3') ||
				(size[i] == '4') || (size[i] == '5') || (size[i] == '6') ||
				(size[i] == '7') || (size[i] == '8') || (size[i] == '0') ||
				(size[i] == '9')) {
				size_int = size_int * b + static_cast<int>(size[i]) - '0';
				b = 10;
				i++;
				if (i > size.length() - 1) break;
			}
			break;
}
        Queue queue1(size_int);
        std::string command;
        while (std::getline(read, command)) {
            pos = command.find("push");
            if ( pos!= std::string::npos ) {
                std::string x;
                if ((command.length()-1 < pos+5) || (command[pos+4]!=' '))
                    write << "error" << std::endl;
                else {
                    for ( unsigned i = pos+5; i < command.length(); i++)
                        x+=command[i];
                   queue1.st_push(x, write);
                }
            }
            else {
                pos = command.find("pop");
				if (pos != std::string::npos) {
					if (pos + 2 == command.length() - 1)
						queue1.st_pop(write);
					else 
					write << "error" << std::endl;
				}
                else {
                    pos = command.find("print");
                    if ( pos!= std::string::npos) {
						if (pos + 4 == command.length() - 1)
                        queue1.st_print(write);
						else
							write << "error" << std::endl;
		   }
		    else {
				if (command.length() != 0) write << "error" << std::endl; 
				}
                    }
                }
            }
        }